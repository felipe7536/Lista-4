# Lista-4
'''
Esse programa preenche uma matriz binaria de um arquivo txt
Aluno: FELIPE RODRIGUES RIBEIRO
DRE: 119052031
Curso: Matemática Aplicada
Disciplina: Topicos da Matemática Aplicada A
'''

print("...................................................................... ")
print("Aqui tu pode brincar de paint do Windows com uma matriz binaria")
print("Digira iniciar() pra iniciar o programa")
print("...................................................................... \n")


#-------------------------------------------------Essa função recursiva distribui os 0 na matriz ----------------------------------------#
def infecção():
    #GLOBAL
    global  mat_p, movi, cont, zero_novo, zero_velho, zero_inter

    #Contador rolando sempre que a função for chamada
    cont+=1
    
    for i in zero_inter:
        zero_novo.append(i)
    zero_inter.clear()
    
    for i in zero_novo:
        pintar(i)
        zero_velho.append(i)
        
    zero_novo.clear()
    
    for i in zero_inter:
        zero_novo.append(i)
    zero_inter.clear()
    
    if cont%movi == 0:#Contador rolando pra printar a matriz
        print_mat()
        k = input("Pressione Enter pra continuar")
    
    if len(zero_novo) != 0:#Confere se ainda tem partes para pintar e chama a rotina de novo
        infecção()
    return
#---------------------------------------------------------------------------------------------------------------------------------------------#

#------------------------------------------Essa rotina põe 4 zeros em volta do parametro passado a ela-------------------------------------------#
def pintar(bact):
    #As globais
    global mat_p, n, zero_velho, zero_novo, zero_inter

    #Pinta o cara a direita da bacteria se ele não estiver fora da matriz ou não for borda
    if bact+1 <= len(mat_p)-1 and bact+1 not in zero_velho:
        mat_p[ bact+1 ] = 0
        #Esse cara que foi pintado agora vai pro grupo intermediario se já não tiver nele
        if bact+1 not in zero_inter:
            zero_inter.append(bact+1)
        
    #Pinta-o para a esquerda da bacteria se ele não estiver fora da matriz ou não for borda        
    if bact-1 >= 0 and bact-1 not in zero_velho:
        mat_p[ bact-1 ] = 0
        #Esse  que foi pintado agora vai pro grupo intermediario se já não tiver nele
        if bact-1 not in zero_inter:
            zero_inter.append(bact-1)

    #Pinta-o  para a cima da bacteria se ele não estiver fora da matriz ou não for borda              
    if bact-n >= 0 and bact-n not in zero_velho:
        mat_p[ bact-n ] = 0
        #Esse cara que foi pintado agora vai pro grupo intermediario se já não tiver nele        
        if bact-n not in zero_inter:
            zero_inter.append(bact-n)
            
    #Pinta-o a baixo da bacteria se ele não estiver fora da matriz ou não for borda 
    if bact + n <= len(mat_p)-1 and bact+n not in zero_velho:
        mat_p[bact+n] = 0
        #Esse cara que foi pintado agora vai pro grupo intermediario se já não tiver nele
        if bact+n not in zero_inter:
            zero_inter.append(bact+n)
 
    return
#-------------------------------------Essa rotina pega a matriz  e printa ------------------------------------
def print_mat():    
    global mat_p, m, n

    print()
    for i in range (m):
        for j in range (n):
            print("{0}".format(mat_p[i*n + j]),sep="",end="")
        print()
    print()
    return
#---------------------------------------------------------------------------------------------------------------------------------------------#

#--------------------------------------------Aqui o programa abre a matriz binaria do arquivo txt---------------------------------------------#
def ler_arq(nome):
    try:
        arq = open('{}.txt'.format(nome))
    except FileNotFoundError:
             print("Esse aquivo  não existe , tente novamente")
             nome = str(input("Digite o nome do arquivo que esta com a matriz "))
             ler_arq(nome)
             
    paradas = arq.read()
    mat = paradas.split()
    arq.close()
    return mat
#---------------------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------Essa rotina determina os demais comandos---------------------------------------------#

def iniciar():
    # Global
    global mat_p, mat, m, n, a, movi, cont, zero_velho, zero_novo, zero_inter

    #Essa parte lê o arquivo txt e extrai a matriz
    nome = str(input("Digite o nome do arquivo que esta com a matriz "))
    mat = ler_arq(nome)

    #Essa parte pega a matriz que extrai como lista de strings e da um split total , separando cada letra das strings
    mat_p = []
    m = len(mat)
    n = len(mat[0])
    for i in range(m):
        for j in range(n):
            #Esse try aqui é porque no meio das strings vai ter um X (indicando onde vai começar o preenchimento)
            try:
                mat_p.append(int(mat[i][j]))
            except ValueError :
                mat_p.append(mat[i][j])
                a = i*n+j
    #Printa a matriz do txt antes do preenchimento
    print()
    print("Sua matriz é assim:")
    print()
    for i in range (m):
        print(mat[i])
    print()

    #Define de quantas em quantas etapas de preenchimento a imagem vai ser printada
    try:
        movi = int(input("Após quantos movimentos você quer mostrar o estado da figura? "))
    except ValueError:
        movi = 1
    
    #Cria 3 grupos classificatorios de 0 os que não podem ser pintados, os que vão ser pintados

    zero_velho = []
    for i in range(len(mat_p)):
        if mat_p[i] == 0:
            zero_velho.append(i)
            
    mat_p[a] = 0
    zero_novo = [a]
    zero_inter = []
    
    #cria o contador de movimentos e chama a subrotina recursiva que espalha os 0 na matriz 
    cont = 0
    infecção()

    print("Fim do preenchimento, resultado:")
    print_mat()

    return   
#---------------------------------------------------------------------------------------------------------------------------------------------# 

